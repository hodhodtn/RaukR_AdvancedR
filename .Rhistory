lapply(1:5, function(i) { Sys.sleep(1); 1})
install.packages("BiocParallel")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocParallel")
library(BiocParallel)
param = SnowParam(5)
bpstart(param)
x2 <- bplapply(1:5, function(i) {Sys.sleep(1); i }, BPPARAM = param)
system.time(x2 <- bplapply(1:5, function(i) {Sys.sleep(1); i }, BPPARAM = param))
X = list(1, 2, "three", 4)
fun = function(i sqrt(i))
fun = function(i) sqrt(i)
lapply(X, fun)
bplapply(X, fun, BPPARAM = param)
(result = bptry(bplapply(X, fun, BPPARAM = param)))
rm(list = ls())
install_version("GenABEL.data", version = "1.0.0", repos = "http://cran.us.r-project.org")
??install_version
devtools::install_version("GenABEL.data", version = "1.0.0", repos = "http://cran.us.r-project.org")
devtools::install_version("GenABEL", version = "1.8-0", repos = "http://cran.us.r-project.org")
library(GenABEL)
library(GenABEL.data)
data = load.gwaa.data(phenofile = "data/GWAS/phenotype.dat", genofile = "data/GWAS/genotype.raw")
head(data)
class(data)
gtdata = data@gtdata
nsnps(gtdata)
nids(gtdata)
gtdata[27, 5:7]
as.genotype(gtdata[27, 5:7]@gtps)
as.character(gtdata[27, 5:7])
summary(gtdata[,1:5])
summ = summary(gtdata[,1:5])         # Q.2 minor allele frequency
plot(summ$Q.2)
qplot(summ$Q.2)
library(ggplot2)
qplot(summ$Q.2)
plot(summ$Q.2)
pheno = data@phdata
summary(pheno)
table(pheno[,2:3])
qc1 = check.marker(data = data, callrate = 0.95, perid.call = 0.99, maf = 0.05, hweidsubset = pheno == 0)
qc1 = check.marker(data = data, callrate = 0.95, perid.call = 0.99, maf = 0.05, hweidsubset = pheno$pheno == 0)
summary(qc1)
str(qc1)
data.clean = data[qc1$idok, qc1$snpok]
nids(data.clean)
qc1 = check.marker(data = data, callrate = 0.95, perid.call = 0.95, maf = 0.05, hweidsubset = pheno$pheno == 0)
data.clean = data[qc1$idok, qc1$snpok]
nids(data.clean)
autoMark = autosomal(data.clean)
gkin = ibs(data.clean[, autoMark], weight = 'freq')
gdm = as.dist(0.5 - gkin)
mds = cmdscale(gdm)
plot(mds)
plot(mds, col=pheno$sex)
plot(mds, col=pheno$id)
plot(mds, as.numeric(col=pheno$id))
plot(mds, col=pheno$sex)
plot(mds, col=pheno$sex, pch=21)
plot(mds, col=pheno$sex, pch=20)
an = qtscore(pheno$pheno, data.clean, trait.type = "binomial")
an = qtscore(formula = pheno ~ 1, data.clean, trait.type = "binomial")
an = qtscore(formula = pheno ~ 1 + sex, data.clean, trait.type = "binomial")
sum(is.na(data.clean@phdata$pheno))
plot(an)
summary(an)
estlambda(an[, 'P1df'], plot = TRUE)
h2h = polygenic(pheno ~ sex, kinship.matrix = gkin, data = data.clean)
mm = mmscore(h2object = h2h, data = data.clean,clambda = TRUE)
estlambda(mm, plot = TRUE)
plot(mm)
h2h = polygenic(pheno ~ sex, kinship.matrix = gkin, data = data.clean, llfun = 'polylink')
h2h = polygenic(pheno ~ sex, kinship.matrix = gkin, data = data.clean, llfun = 'polylik')
mm = mmscore(h2object = h2h, data = data.clean,clambda = TRUE)
plot(mm)
h2h = polygenic(pheno ~ sex, kinship.matrix = gkin, data = data.clean, llfun = 'polylik', trait.type = 'binomial')
mm = mmscore(h2object = h2h, data = data.clean,clambda = TRUE)
plot(mm)
data.clean[1,1]
data.clean[1,1:2]
data.clean[1,]
data.clean[1,1:3]
data.clean[1,1:4]
rm(list = ls())
q()
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(biomaRt)
library(tidyverse)
de_tab <- read.table("../data/DE_table.txt", sep="\t", header=TRUE, as.is=TRUE)
de_tab <- read.table("data/DE_table.txt", sep="\t", header=TRUE, as.is=TRUE)
head(de_tab)
q_genes = de_tab$ensembl_gene_id
q_genes
gene_annot <- getBM(attributes = c("ensembl_gene_id","hgnc_symbol","chromosome_name","band","strand","start_position","end_position","description", "gene_biotype"), filters = "ensembl_gene_id", values = q_genes, mart = ensembl_mart)
listMarts()
ensembl = useMart("ENSEMBL_MART_ENSEMBL")
ensembl
listDatasets(ensembl)
rm(list = ls())
q()
install.packages(c("leaflet", "geoR", "rgdal", "raster", "sp", "spdep", "SpatialEpi", SpatialEpiApp))
install.packages(c("leaflet", "geoR", "rgdal", "raster", "sp", "spdep", "SpatialEpi", "SpatialEpiApp"))
install.packages("RcppArmadillo")
system("brew install gdal")
knitr::opts_chunk$set(echo = TRUE)
#Check if you already have any of the required packages
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#Check if you already have any of the required packages
list.of.packages <- c("shiny","DT","dygraphs","leaflet","SpatialEpiApp","rgdal","INLA","dplyr","ggplot2","leaflet","geoR","raster","sp","spdep","SpatialEpi")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#Install the missing packages
if(length(new.packages)) install.packages(new.packages)
#Load packages (@hani)
lapply(list.of.packages, library, character.only = TRUE)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
#Load packages (@hani)
lapply(list.of.packages, library, character.only = TRUE)
data(pennLC)
class(pennLC)
names(pennLC)
?pennLC
head(pennLC$data)
library(tidyverse)
pennLC$data %>%
group_by(county) %>% summarise(tot_num=sum(cases))
pennLC$data <- pennLC$data[order(pennLC$data$county, pennLC$data$race, pennLC$data$gender, pennLC$data$age), ]
E <- expected(population = pennLC$data$population, cases = pennLC$data$cases, n.strata = 16)
d = pennLC$data %>%
group_by(county) %>% summarise(tot_num=sum(cases))
d$E <- E[match(d$county, unique(pennLC$data$county))]
head(d)
names(d)
names(d)[2]
names(d)[2]="Y"
names(d)
head(pennLC$smoking)
left_join(d, pennLC$smoking, by="county")
E
d = left_join(d, pennLC$smoking, by="county")
d$SMR <- d$Y/d$E
head(d)
map <- pennLC$spatial.polygon
rownames(d)
rownames(d) <- d$county
rownames(d)
map <- SpatialPolygonsDataFrame(map, d, match.ID = TRUE)
head(map@data)
l <- leaflet(map) %>% addTiles()
colorNumeric(palette = "YlOrRd", domain = map$SMR)
pal <- colorNumeric(palette = "YlOrRd", domain = map$SMR)
l %>% addPolygons(color = "grey", weight = 1, fillColor = ~pal(SMR), fillOpacity = 0.5) %>%
addLegend(pal = pal, values = ~SMR, opacity = 0.5, title = "SMR", position = "bottomright")
nb <- poly2nb(map)
head(nb)
nb2INLA("map.adj", nb)
g <- inla.read.graph(filename = "map.adj")
g
summary(g)
1:nrow(map@data)
map$re_u <- 1:nrow(map@data)
map$re_v <- 1:nrow(map@data)
formula <- Y ~ smoking + f(re_u, model = "besag", graph = g) + f(re_v, model = "iid")
formula
res <- inla(formula, family = "poisson", data = map@data, E = E, control.predictor = list(compute = TRUE))
summary(res)
data(gambia)
dim(gambia)
head(gambia)
library(dplyr)
d <- group_by(gambia, x, y) %>%
summarize(total = n(),
positive = sum(pos),
prev = positive/total)
sps  <- SpatialPoints(d[, c("x", "y")], proj4string = CRS("+proj=utm +zone=28"))
spst <- spTransform(sps, CRS("+proj=longlat +datum=WGS84"))
sps
spst <- spTransform(sps, CRS("+proj=longlat +datum=WGS84"))
spst
coordinates(spst)
d[, c("long", "lat")] <- coordinates(spst)
head(d)
pal <- colorBin("viridis", bins = c(0, 0.25, 0.5, 0.75, 1))
leaflet(d) %>%  addProviderTiles(providers$CartoDB.Positron) %>%
addCircles(lng = ~long, lat = ~lat, color = ~pal(prev)) %>%
addLegend("bottomright", pal = pal, values = ~prev, title = "Prevalence") %>%
addScaleBar(position = c("bottomleft"))
r <- getData(name = 'alt', country = 'GMB', mask = TRUE)
r
getData('ISO3')
r <- getData(name = 'alt', country = 'SWE', mask = TRUE)
pal <- colorNumeric("viridis", values(r), na.color = "transparent")
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(r, colors = pal, opacity = 0.5) %>%
addLegend("bottomright", pal = pal, values = values(r), title = "Altitude") %>%
addScaleBar(position = c("bottomleft"))
r <- getData(name = 'alt', country = 'GMB', mask = TRUE)
pal <- colorNumeric("viridis", values(r), na.color = "transparent")
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(r, colors = pal, opacity = 0.5) %>%
addLegend("bottomright", pal = pal, values = values(r), title = "Altitude") %>%
addScaleBar(position = c("bottomleft"))
d$alt <- extract(r, d[, c("long", "lat")])
head(d)
coo <- cbind(d$long, d$lat)
mesh <- inla.mesh.2d(loc = coo, max.edge = c(0.1, 5), cutoff = 0.1)
mesh$n
plot(mesh)
points(coo, col = "red")
coo
rm(list = ls())
q()
shiny::runApp('data/app')
runApp('data/app')
runApp('data/app')
summary(read.csv("data_economist.csv"))
summary(read.csv("data/data_economist.csv"))
runApp('data/app')
getwd()
runApp('data/app')
runApp('data/app')
runApp('data/app')
runApp('data/app')
library(DT)
runApp('data/app')
summary(read.csv("data/data_economist.csv"))
runApp('data/app')
runApp('data/app')
runApp('data/app')
runApp('data/app')
runApp('data/app')
summary(read.csv("data/data_economist.csv"))
runApp('data/app')
runApp('data/app')
runApp('data/app')
runApp('data/app')
runApp('data/app')
runApp('data/app')
summary(read.csv("data/data_economist.csv"))
runApp('data/app')
runApp('data/app')
runApp('data/app')
summary(read.csv("data/data_economist.csv"))
read.csv("data/data_economist.csv") %>% summary()
read.csv("data/data_economist.csv") %>% print(Country)
read.csv("data/data_economist.csv") %>% factor(Country)
library(bsplus)
install.packages('bsplus')
install.packages('VariantAnnotation')
source("https://bioconductor.org/biocLite.R")
biocLite('VariantAnnotation')
biocLite('mgcv')
biocLite('VariantAnnotation')
library(VariantAnnotation)
vcf=readVcf(file = 'data/mutect_vep.vcf',genome = 'hg19') # this is a hard coded file path
vcf=readVcf(file = '../data/W3_cancer_data/mutect_vep.vcf',genome = 'hg19') # this is a hard coded file path
vcf=readVcf(file = 'data/W3_cancer_data/mutect_vep.vcf',genome = 'hg19') # this is a hard coded file path
vcf
info(vcf)
rowRanges(vcf)
geno(vcf)
head(vcf)
assay(vcf)
info(vcf)
vcf
head(assay(vcf))
SummarizedExperiment::coverage(vcf)
head(assay(vcf))
unique(assay(vcf))
dim(assay(vcf))
head(assay(vcf[,1]))
geno(vcf)
geno(vcf)[1]
geno(vcf[[1]])
geno(vcf)[[1]]
head(geno(vcf)[[1]])
dim(vcf)
library(data.table)
install.packages('data.table')
library(data.table)
names(vcf)
geno(vcf)
mutations=data.table(name=names(vcf),
coverage=geno(vcf)$DP,
alleleratio=as.numeric(geno(vcf)$FA))
summary(mutations)
library(ggplot2)
ggplot()+theme_light()+ggtitle('Mutation allele ratio')+xlab('')+
geom_point(mapping = aes(x=1:length(alleleratio),y=alleleratio,col=log10(coverage.HCC1143)),data = mutations)
head(mutations)
rowRanges(vcf)
r <- rowRanges(vcf)
as.character(seqnames(r))
seqnames(r)
start(r)
# let's add chromosome and position to the table
mutations$chr=as.character(seqnames(r))
mutations$pos=as.numeric(start(r))
c(diff(mutations$pos),0)
# and the distance to the next mutation
mutations$spacing=c(diff(mutations$pos),0)
head(mutations)
603454-789205
789205-847617
tail(mutations)
as.data.table(info(vcf))
info=as.data.table(info(vcf))
header(vcf)
info(header(vcf))
strsplit(info(header(vcf))['CSQ',3],'Format: ')
vep_header=strsplit(info(header(vcf))['CSQ',3],'Format: ')[[1]][2]
strsplit(vep_header,'\\|')
strsplit(vep_header,'\\|')[[1]]
vep_header=strsplit(vep_header,'\\|')[[1]]
head(info$CSQ)
tail(mutations)
head(mutations, 15)
# start with an empty matrix that fits the annotations (and one number that identifies which mutation it annotates)
annotation_table=matrix(data = NA,nrow = length(unlist(info$CSQ)),ncol = length(vep_header)+1)
colnames(annotation_table)=c('N',vep_header)
row=1
for (i in 1:nrow(info)) { # for each mutation
for (j in 1:length(info$CSQ[[i]])) { # for each VEP annotation of that mutation
line=strsplit(info$CSQ[[i]][j],'\\|')[[1]]
annotation_table[row,1]=i # to remember which mutation it belongs to
annotation_table[row,1+(1:length(line))]=line
row=row+1
}
}
# merge with the mutation table
mutations$N=as.character(1:nrow(mutations))
mutations=merge(mutations,as.data.table(annotation_table),by='N')
mutations
head(mutations)
cancergenes=fread('https://civicdb.org/downloads/nightly/nightly-GeneSummaries.tsv')
mutations_knowngene=mutations[SYMBOL %in% cancergenes$name]
table(mutations_knowngene$Consequence)
head(mutations_knowngene)
head(mutations_knowngene[,1:5])
head(mutations_knowngene[,1:10])
factor(mutations_knowngene$IMPACT)
levels(mutations_knowngene$IMPACT)
table(mutations_knowngene$IMPACT)
table(mutations_knowngene$Consequence)
table(mutations_knowngene$Consequence[mutations_knowngene$IMPACT=="MODERATE"])
table(mutations_knowngene$Consequence[mutations_knowngene$IMPACT=="LOW"])
mutations[SYMBOL %in% cancergenes$name & IMPACT %in% c('HIGH','MODERATE')]
q()
q()
